# -*- coding: utf-8 -*-
"""선형 회귀.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yaofv3qbAD5LYUXJGo9jKoQ7bJ6jCCa1
"""

# 작성 날짜: 2021.08.29(일)
# 프로그램 개요: 선형 회귀 & 다항 회귀 - 농어의 길이를 통해 무게를 예측하기

#데이터 준비
import numpy as np
perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
                         21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
                         23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
                         27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
                         39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
                         44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
                         115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
                         150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
                         218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
                         556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
                         850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
                         1000.0])

#훈련세트와 테스트 세트 나누기
from sklearn.model_selection import train_test_split
train_input, test_input, train_target, test_target = train_test_split(perch_length, perch_weight, random_state=42)

#입력데이터를 2차원 배열로 변환
train_input = train_input.reshape(-1,1)
test_input = test_input.reshape(-1,1)
print(train_input.shape, test_input.shape)

#k-최근접 이웃 회귀의 한계
from sklearn.neighbors import KNeighborsRegressor
knr = KNeighborsRegressor(n_neighbors=3)
knr.fit(train_input, train_target)
print(knr.predict([[50]]))   #모델 예측... but 오차 큼

#산점도 그려서 확인
import matplotlib.pyplot as plt
plt.scatter(train_input, train_target)
distances, indexes = knr.kneighbors([[50]])    #길이 50에 해당하는 이웃의 인덱스 구하기
plt.scatter(train_input[indexes], train_target[indexes], marker='D')
plt.scatter(50, 1033, marker='^')    #길이 50cm의 농어 데이터
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

#선형 회귀 모델 훈련
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
lr.fit(train_input, train_target)

#50cm 농어 무게 예측
print(lr.predict([[50]]))
print(lr.coef_, lr.intercept_)

#훈련세트의 산점도 그리기
plt.scatter(train_input, train_target)
#1차 방정식 그리기(구간 15~50)
plt.plot([15, 50], [15*lr.coef_+lr.intercept_, 50*lr.coef_+lr.intercept_])

#50cm 농어 데이터
plt.scatter(50,1241.8, marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

#과대적합 vs 과소적합 --> 과대적합
print(lr.score(train_input, train_target))
print(lr.score(test_input, test_target))

#다항 회귀 모델 훈련

#입력데이터에 제곱항 넣기
train_poly = np.column_stack((train_input ** 2, train_input))
test_poly = np.column_stack((test_input ** 2, test_input))

print(train_poly.shape, test_poly.shape)

lr = LinearRegression()
lr.fit(train_poly, train_target)    #훈련

print(lr.predict([[50**2, 50]]))    #예측
print(lr.coef_, lr.intercept_)   #모델 파라미터
print(lr.coef_[0])

plt.scatter(train_input, train_target)    #산점도

#2차 방정식 그래프 그리기
point = np.arange(15,55)    #구간별 직선
print(point)
plt.plot(point, lr.coef_[0] * point**2 + lr.coef_[1] * point + lr.intercept_)   

#50cm 농어 데이터
plt.scatter([50], lr.predict([[50**2, 50]]), marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

#과대적합 vs 과소적합 --> 과소적합
print(lr.score(train_poly, train_target))
print(lr.score(test_poly, test_target))