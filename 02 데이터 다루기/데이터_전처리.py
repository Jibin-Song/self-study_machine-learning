# -*- coding: utf-8 -*-
"""데이터 전처리.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Jibin-Song/bf3d7449834e02c65e57d07a3d67bdfb/.ipynb
"""

# 작성 날짜: 2021.08.19(목)
# 프로그램 개요: 데이터 전처리; 표준편차를 이용하여 데이터 스케일 맞추기

#데이터 전처리

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

#입력 데이터와 타깃 데이터 만들기
import numpy as np

fish_input = np.column_stack((fish_length, fish_weight))
fish_target = np.concatenate((np.ones(35), np.zeros(14)))

#사이킷런으로 훈련세트와 테스트 세트 나누기

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(fish_input, fish_target, stratify=fish_target)

#훈련하기
from sklearn.neighbors import KNeighborsClassifier
kn = KNeighborsClassifier()
kn.fit(train_input, train_target)
kn.score(test_input, test_target)

print(kn.predict([[25, 150]]))

#이웃하는 n개의 거리와, 인덱스 반환
distances, indexes = kn.kneighbors([[25,150]])
print(distances, indexes)

#산점도 그리기
import matplotlib.pyplot as plt
plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25,150,marker='^')
plt.scatter(train_input[indexes,0], train_input[indexes,1],marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

#기준을 다시 맞춰라
import matplotlib.pyplot as plt
plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(25,150,marker='^')
plt.scatter(train_input[indexes,0], train_input[indexes,1],marker='D')
plt.xlabel('length')
plt.ylabel('weight')
#축의 범위를 수동으로 지정
plt.xlim((0,1000))
plt.show()

#표준점수 이용하여 스케일 맞추기
mean = np.mean(train_input, axis=0)
std = np.std(train_input, axis=0)
print(mean, std)

#브로드캐스팅
train_scaled = (train_input - mean) / std

#예측할 샘플도 스케일 맞춰주기
new = ([25, 150] - mean) / std
print(new)

#다시 훈련하기
kn.fit(train_scaled,train_target)
test_scaled = (test_input - mean) / std
kn.score(test_scaled, test_target)

#이웃 인덱스 다시 구하기
distances, indexes = kn.kneighbors([new])

#산점도 다시 구하기
plt.scatter(train_scaled[:,0], train_scaled[:,1])
plt.scatter(train_scaled[indexes,0], train_scaled[indexes,1])
plt.scatter(new[0], new[1], marker='^')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()